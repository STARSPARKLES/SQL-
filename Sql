--CREATING  TABLE EMPLOYEES  
create table employee(
emp_id int primary key,
emp_name varchar(15)
);

--ADD COLUMN
alter table employee
add salary int

-- ADD COLUMNS
ALTER TABLE EMPLOYEE
ADD DEPART_NAME VARCHAR(20) NULL

--REMOVE COLUMN/ DROP COLUMN
ALTER TABLE EMPLOYEE
DROP COLUMN EMP_SKILLS , EMP_EMAIL

--MODIFY DATATYPE WITH THE HELP OF ALTER COMMAND
ALTER TABLE EMPLOYEE
ALTER column emp_name int

--MODIFY DATATYPE LENGTH
ALTER TABLE EMPLOYEE
ALTER COLUMN EMP_NAME VARCHAR(20);

--RENAME COLUMN NAME (PROBLEM HERE)
ALTER TABLE EMPLOYEE
EXEC sp_rename 'EMPLOYEE.SALARY', 'EMP_SALARY', 'COLUMN'

--RENAME TABLE NAME (PROBLEM HERE)
EXEC sp_renamedb 'EMPLOYEE', 'EMPLOYEE'; 

--TRUNCATE EMPLOYEE TABLE MEANS DELETING ALL ROWS
TRUNCATE TABLE EMPLOYEE

--DROP TABLE 
drop table employee



--INSERTING VALUES IN EMPLOYEE TABLE

insert employee(emp_id,emp_name,salary)
values (1,'amna',450000),
      (2,'noor',690000),
	  (3,'javeria',890000),
	  (4,'kevin',780000),
	  (5,'john',400000);


--UPDATING VALUES OF EMPLOYEES TABLE
update employee
set DEPART_NAME= 'KUBS'
where emp_id=4

--DELETING ROWS
DELETE FROM EMPLOYEE
WHERE EMP_ID=6
--------------------------------QUERIES AND SUB QUERIES-----------------------------------------------------------------
--PRINTING EMPLOYEE NAME WITH MAX SALARIES
SELECT EMP_NAME,EMP_ID FROM EMPLOYEE
WHERE SALARY = (SELECT MAX (SALARY) FROM EMPLOYEE)

--ASCENDING ORDER OF SALARY COLUMN
SELECT * FROM EMPLOYEE
ORDER BY SALARY ASC

--DISPLAY 2ND HIGHEST SALARY FROM TABLE
SELECT MAX(SALARY) FROM EMPLOYEE
WHERE SALARY <> ( SELECT MAX(SALARY) FROM EMPLOYEE);

--DISPLAY 2ND HIGHEST SALARY FROM TABLE
SELECT EMP_NAME 
FROM EMPLOYEE
WHERE SALARY = (
SELECT MAX(SALARY)
FROM EMPLOYEE
WHERE SALARY <> ( SELECT MAX(SALARY) FROM EMPLOYEE)
);
---------------------GROUPBY KEYWORD QUERIES-------------------------------------------------------------
--DISPLAY ALL DEPART NAMES ALONG WITH EMPLOYEE WORKING IN THAT
SELECT DEPART_NAME, COUNT(EMP_NAME)
FROM EMPLOYEE
GROUP BY DEPART_NAME
--DISPLAY ALL DEPART NAMES WHERE NO OF EMPLOYEES ARE LESS THAN 2
SELECT DEPART_NAME
FROM EMPLOYEE
GROUP BY DEPART_NAME
HAVING COUNT(EMP_ID) <2

--HIGHEST SALARY OF EACH DEPART WITH EMPLOYEES NAME\



ALTER TABLE EMPLOYEE
ADD ADDRESS VARCHAR(20)

UPDATE EMPLOYEE
SET ADDRESS= 'ISLAMABAD'
WHERE EMP_ID=5
------------------------------IN /NOT IN KEYWORDS----------------------------------------------------------
--DETAIL OF EMPLOYEE WHOSE ADDRESS IS EITHER KARACHI , LAHORE, MULTAN
SELECT EMP_NAME FROM EMPLOYEE
WHERE ADDRESS IN ('KARACHI','LAHORE','MULTAN')

--DETAIL OF EMPLOYEE WHOSE ADDRESS IS NOT EITHER KARACHI , LAHORE, MULTAN
SELECT EMP_NAME FROM EMPLOYEE
WHERE ADDRESS NOT IN ('KARACHI','LAHORE','MULTAN')

--FIND THE NAME OF EMPLOYEE WHO ARE WORKING ON A PROJECT
SELECT EMP_NAME 
FROM EMPLOYEE
WHERE EMP_ID IN (SELECT EMP_ID FROM PROJECT)


--FIND THE NAME OF EMPLOYEE WHO ARE NOT WORKING IN ANY PROJECT
SELECT EMP_NAME 
FROM EMPLOYEE
WHERE EMP_ID NOT IN (SELECT EMP_ID FROM PROJECT)

----------------------EXISTS / NOT EXISTS KEYWORDS-----------------------------------------------------------
--SELECT EMPLOYEE WHO IS ATLEAST WORKING ON ONE PORJECT
SELECT EMP_NAME 
FROM EMPLOYEE
WHERE EXISTS ( SELECT EMP_ID FROM PROJECT WHERE EMPLOYEE.EMP_ID=PROJECT.EMP_ID)

--SELECT EMPLOYEE WHO IS ATLEAST WORKING ON ONE PORJECT
SELECT EMP_NAME 
FROM EMPLOYEE
WHERE NOT EXISTS ( SELECT EMP_ID FROM PROJECT WHERE EMPLOYEE.EMP_ID=PROJECT.EMP_ID)

--------------------------------CORRELATED QUERIES-------------------------------------------------
--FIND ALL EMPLOYEE DETAIL WHO IS WORKING IN PROJECT
SELECT * FROM EMPLOYEE
WHERE EXISTS (SELECT EMP_ID FROM PROJECT WHERE EMPLOYEE.EMP_ID=PROJECT.EMP_ID)

-----------------------------JOIN KEYWORD--------------------------------------------------------------
SELECT * FROM EMPLOYEE
JOIN PROJECT ON EMPLOYEE.EMP_ID = PROJECT.P_ID
SELECT * FROM EMPLOYEE
-----------------------------SELF JOIN TOPIC------------------------------------------------------------
FIND EMPLOYEE WHO IS ENROLLED IN ATLEAST TWO PROJECTS BY COMPOSITE TABLE
SELECT T1.EMP_ID, T2.P_ID
FROM COMP_TAB T1, COMP_TAB T2
WHERE (T1.EMP_ID =T2.EMP_ID AND T1.P_ID <> T2.P_ID)

---------------------------LEFT OUTER JOIN--------------------------------------------------------------
SELECT A.salary, B.p_salary
FROM EMPLOYEE A
LEFT JOIN PROJECT B ON A.SALARY = B.p_salary;


--------------------------RIGHT OUTER JOIN-------------------------------------------------------------
SELECT A.SALARY, B.P_SALARY
FROM EMPLOYEE A
RIGHT JOIN PROJECT B ON A.SALARY =B.P_SALARY

--------------------------FULL OUTER JOIN-------------------------------------------------------------
SELECT A.SALARY, B.P_SALARY
FROM EMPLOYEE A
FULL OUTER JOIN PROJECT B ON A.SALARY =B.P_SALARY

------------------------AGGREGIATE FUNCTIONS-----------------------------------------------------------
SELECT MAX(SALARY) FROM EMPLOYEE
SELECT MIN(SALARY) FROM EMPLOYEE
SELECT SUM(SALARY) FROM EMPLOYEE
SELECT COUNT(SALARY) FROM EMPLOYEE
SELECT AVG(SALARY) FROM EMPLOYEE


-----------------------------WILD CARD CHARACTERS/ LIKE KEYWORD / CONSTRAINTS KEYWORDS / -----------------------------------------------
SELECT EMP_NAME FROM EMPLOYEE
WHERE SALARY > 450000 ----------USE CONDITIONS > , < , <= ,>= ,!=, AND , OR , NOT

SELECT * FROM EMPLOYEE
WHERE DEPART_NAME IS NULL

SELECT EMP_NAME FROM EMPLOYEE
WHERE EMP_NAME LIKE '[^a,b,n,k]%'

SELECT EMP_NAME FROM EMPLOYEE
WHERE EMP_NAME LIKE '[a-c]%'
-----------------------------USING CONSTRAINTS WITHOUT CONSTRAINT KEYWORD------------------------
CREATE TABLE STUDENT(
S_ID INT PRIMARY KEY IDENTITY (1,1),
S_NAME VARCHAR(20) UNIQUE NOT NULL, 
AGE INT CHECK (AGE>=12 AND AGE <=20),
CLASS VARCHAR(20) DEFAULT('UNASSIGENED'),
);
INSERT INTO STUDENT(S_NAME,AGE)
VALUES ('FATIMA',14);

SELECT * FROM STUDENT

----------------------------USING CONSTRAINT KEYWORD---------------------------------------------
CREATE TABLE STUDENT(
S_ID INT  IDENTITY (1,1),
S_NAME VARCHAR(20), 
AGE INT ,
CLASS VARCHAR(20)  DEFAULT('UNASSIGNED'),
CONSTRAINT CON_ID PRIMARY KEY (S_ID),
CONSTRAINT CON_NAME UNIQUE (S_NAME),
CONSTRAINT CON_AGE CHECK (AGE>=12 AND AGE<=20),
);
INSERT INTO STUDENT(S_NAME,AGE)
VALUES ('NOORJAFFAR',14);
SELECT * FROM STUDENT
TRUNCATE TABLE STUDENT
DROP TABLE STUDENT
------------------------------------------HOW TO DROP CONSTRAINTS---------------------------------------------------
ALTER TABLE STUDENT
DROP CONSTRAINT CON_AGE

ALTER TABLE STUDENT
DROP CONSTRAINT CON_NAME

ALTER TABLE STUDENT
DROP CONSTRAINT CON_ID

ALTER TABLE STUDENT ---REMOVING DEFAULT CONSTRAINT---
DROP CONSTRAINT 

----------------------------HOW TO ADD CONSTRAINTS---------------------------------------
ALTER TABLE STUDENT
ADD CONSTRAINT CON_AGE CHECK (AGE>=12 AND AGE <=20);

ALTER TABLE STUDENT
ADD CONSTRAINT CON_NAME UNIQUE(S_NAME)

ALTER TABLE STUDENT
ADD CONSTRAINT CON_ID PRIMARY KEY (S_ID)


-------------------------------------------------WHEN PARENT CHILD RELATIONSHIP------------------------------------------------------
CREATE TABLE COMP_TAB(
P_ID INT FOREIGN KEY REFERENCES PROJECT(P_ID) ON DELETE CASCADE,
EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) ON DELETE CASCADE,
SINCE INT
);

CREATE TABLE COMP_TAB(
P_ID INT FOREIGN KEY REFERENCES PROJECT(P_ID) ON UPDATE CASCADE,
EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) ON UPDATE CASCADE,
SINCE INT
);

CREATE TABLE COMP_TAB(
P_ID INT FOREIGN KEY REFERENCES PROJECT(P_ID) ON DELETE SET NULL,
EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) ON UPDATE SET NULL ,
SINCE INT
);

CREATE TABLE COMP_TAB(
P_ID INT FOREIGN KEY REFERENCES PROJECT(P_ID) ON DELETE SET DEFAULT,
EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) ON UPDATE SET DEFAULT,
SINCE INT
);

----------------------------UNION , UNION ALL , INTERSECTION , ORDERBY , GROUPBY , BETWEEN , HAVING , IN --------------------------------
SELECT EMP_NAME,EMP_ID FROM EMPLOYEE
UNION
SELECT S_NAME, S_ID FROM STUDENT

SELECT EMP_NAME,EMP_ID FROM EMPLOYEE
UNION ALL
SELECT S_NAME, S_ID FROM STUDENT

SELECT SALARY FROM EMPLOYEE
INTERSECT
SELECT P_SALARY FROM PROJECT

SELECT SALARY 
FROM EMPLOYEE
ORDER BY SALARY ASC

SELECT P_SALARY 
FROM  PROJECT
ORDER BY P_SALARY DESC

SELECT  DEPART_NAME, COUNT(EMP_NAME) 
FROM EMPLOYEE
GROUP BY DEPART_NAME

SELECT EMP_NAME
FROM EMPLOYEE
WHERE SALARY BETWEEN 45000 AND 890000

SELECT EMP_NAME 
FROM EMPLOYEE
WHERE address IN ('KARACHI','LAHORE')

SELECT DEPART_NAME
FROM EMPLOYEE 
GROUP BY DEPART_NAME 
HAVING SUM(SALARY)>450000

------------------------------------------------CASES AND INDEXES------------------------------------------------------
SELECT 
    EMP_NAME,
    CASE
        WHEN SALARY = 450000 THEN SALARY
        WHEN SALARY = 60000 THEN SALARY
        ELSE NULL
    END AS SAL
FROM EMPLOYEE;

CREATE NONCLUSTERED INDEX EMP_INDEX
ON EMPLOYEE (EMP_NAME);
ALTER TABLE EMPLOYEE
DROP INDEX EMP_INDEX
CREATE CLUSTERED INDEX STUDENT_INDEX1
ON STUDENT (S_NAME);


--RUNNING TABLE 
select * from employee  
select * from project
SELECT * FROM STUDENT
--CREATING PROJECT TABLE
create table PROJECT(
P_id int primary key, 
P_name VARchar(20), 
--EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) 
);
alter table project
add p_salary int

update project
set p_salary = 6500000
where P_id = 4

insert into PROJECT(P_id,P_NAME)
values(6,'P5');
      

select * from  PROJECT
DROP TABLE PROJECT
------------------COMPOSITE TABLE----------------------------------------
CREATE TABLE COMP_TAB(
P_ID INT FOREIGN KEY REFERENCES PROJECT(P_ID) ,
EMP_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMP_ID) ,
SINCE INT,
CONSTRAINT COMP_KEY PRIMARY KEY  (P_ID,EMP_ID) ---COMPOSITE PRIMARY KEY
);
INSERT INTO COMP_TAB (P_ID,EMP_ID,SINCE)
VALUES (1,2,2000),
       (2,3,2002),
	   (3,4,2004);
UPDATE COMP_TAB
SET EMP_ID=1
WHERE P_ID=2
SELECT * FROM COMP_TAB
DROP TABLE COMP_TAB
